WEBVTT

1
00:00:01.112 --> 00:00:05.762
こんにちは、データエンジンとファイルストアの概要へようこそ。

2
00:00:07.525 --> 00:00:10.995
このセクションでは、我々が使うデータエンジンである

3
00:00:10.995 --> 00:00:13.348
Hyperデータベースを見ていきます。

4
00:00:14.660 --> 00:00:17.960
また、データエンジンの使用方法、

5
00:00:17.960 --> 00:00:20.470
関連クエリの呼び出し、

6
00:00:20.470 --> 00:00:23.423
ファイルストアの機能についても説明します。

7
00:00:25.840 --> 00:00:28.963
ここで大まかに見える化しているのは、

8
00:00:28.963 --> 00:00:33.103
データエンジンとファイルストア、そして他のデータレイヤーがどのように連携しているかということです。

9
00:00:36.100 --> 00:00:39.170
まず最初に、データ・エンジンについて説明します。

10
00:00:39.170 --> 00:00:44.090
データエンジンは、抽出ファイルの作成とクエリを処理します。

11
00:00:44.090 --> 00:00:48.275
そのため、バックグラウンダーやファイルストア処理と一緒に動作します。

12
00:00:48.275 --> 00:00:53.225
また、抽出ファイルがパブリッシュされたときに、データサーバーのプロセスから呼び出されることもあります。

13
00:00:54.110 --> 00:00:57.470
VizQLサーバーが、このエンジンを呼び出すことになるのは、

14
00:00:57.470 --> 00:01:01.773
抽出ファイルをデータソースとして使用するレンダリングが必要な場合です。

15
00:01:04.890 --> 00:01:07.140
では、ハイパーとは何でしょうか？

16
00:01:07.140 --> 00:01:09.840
Hyperはカラムベースのデータベースで、

17
00:01:09.840 --> 00:01:12.090
インメモリ処理であり、

18
00:01:12.090 --> 00:01:16.560
Tableauが使用していた古いエンジンに比べて、速度面で大きな優位性を持っており、

19
00:01:16.560 --> 00:01:20.400
特に行数の多いデータベースでこの優位性が活かされます。

20
00:01:20.400 --> 00:01:24.742
現在、Hyperは他のプロセスからも呼び出され、抽出ファイルを作成します。

21
00:01:26.122 --> 00:01:31.122
Hyper APIはTableauの抽出ファイルである .hyperファイルとのやりとりを自動化するために使用され、

22
00:01:31.840 --> 00:01:36.740
抽出ファイルの新規作成、または既存ファイルの展開にも用いることができます。

23
00:01:36.740 --> 00:01:41.660
さらに、Hyper APIは、抽出ファイルの追加、削除、更新、

24
00:01:41.660 --> 00:01:44.673
読み込みを行うことができます。

25
00:01:46.670 --> 00:01:51.140
では、データエンジンが使用されるタイミングについても見てみましょう。

26
00:01:51.140 --> 00:01:54.180
Vizportalが抽出ファイルをパブリッシュする場合、

27
00:01:54.180 --> 00:01:56.290
あるいはバックグラウンダーが抽出ファイルを更新する場合、

28
00:01:56.290 --> 00:02:01.290
データエンジンが呼び出され、必要な.hyperファイルを作成します。

29
00:02:01.300 --> 00:02:05.977
また、データエンジンは、関連するクエリの呼び出しが必要な場合にも関与します。

30
00:02:05.977 --> 00:02:09.993
一時的なデータを取得するデータベースへのクエリのことです。

31
00:02:10.840 --> 00:02:15.840
例えば、あるワークブックのために2つの異なるデータソースからデータを取得する必要がある場合、

32
00:02:15.910 --> 00:02:19.670
2つのデータソースへのクエリを組み合わせる必要があります。

33
00:02:19.670 --> 00:02:23.732
データエンジンは、Tableauサーバーのクエリを組み合わせるエンジンだと見なすこともできるのです。

34
00:02:27.130 --> 00:02:30.020
では次に、ファイルストアについて少し説明します。

35
00:02:30.020 --> 00:02:33.350
これはファイルを保存するもので、その名の通りですね。

36
00:02:33.350 --> 00:02:35.505
もう少し正確に言うと、

37
00:02:35.505 --> 00:02:40.480
Tableauサーバー環境全体の抽出ファイルのストレージを処理する役割を担っています。

38
00:02:41.760 --> 00:02:44.480
つまり、マルチノード環境では、

39
00:02:44.480 --> 00:02:49.200
ファイルストアはクラスタ内のノード間でファイルをコピーして同期するので、

40
00:02:49.200 --> 00:02:52.893
すべてのワーカーが抽出ファイルにアクセスできます。

41
00:02:56.520 --> 00:03:00.620
そのため、新しい抽出ファイルが公開または更新されると、

42
00:03:00.620 --> 00:03:03.620
同期ジョブが作成され、新しいファイルを

43
00:03:03.620 --> 00:03:06.693
ファイルストアで他のワーカーにコピーします。

44
00:03:07.530 --> 00:03:10.755
抽出ファイルが大規模な更新で新しいものに置き換えられると、

45
00:03:10.755 --> 00:03:15.232
ファイルストアはリープジョブも処理し、

46
00:03:15.232 --> 00:03:19.030
設定されたすべてのノードから抽出ファイルを削除します。

47
00:03:19.030 --> 00:03:21.810
ファイルストアはバックアップ中にも呼び出され、

48
00:03:21.810 --> 00:03:24.090
抽出ファイルを提供します。

49
00:03:24.090 --> 00:03:27.150
マルチノード環境では、バックアップ処理中に

50
00:03:27.150 --> 00:03:30.323
1つのファイルストア・ノードのみがバックアップされます。

51
00:03:31.700 --> 00:03:33.488
さて、デコミッショニングを行うと、

52
00:03:33.488 --> 00:03:37.380
ファイルストアのインスタンスは読み取り専用モードになり、

53
00:03:37.380 --> 00:03:41.957
そのファイルストアのインスタンスに含まれる固有のデータは、

54
00:03:42.820 --> 00:03:45.633
ノードクラスタ内の他のファイルストアにコピーされます。

55
00:03:46.730 --> 00:03:51.730
そのため、お客様がデコミッショニングを行わずにファイルストアを削除しようとすると、

56
00:03:51.920 --> 00:03:54.493
最初にデコミッショニングを行うよう促されます。

57
00:03:57.850 --> 00:03:59.977
さて、一つ注意しなければならないことは、

58
00:03:59.977 --> 00:04:03.510
データエンジンとファイルストアは密接に連携して動作していることです。

59
00:04:03.510 --> 00:04:07.650
しかし、互いに直接やりとりをすることはありません。

60
00:04:07.650 --> 00:04:12.650
その代わり、両者はデータリポジトリに情報を提供したり、そこから情報を取得したりします。

61
00:04:13.100 --> 00:04:17.310
つまり、データエンジンが抽出ファイルの保存場所を知る必要がある場合、

62
00:04:17.310 --> 00:04:21.453
ファイルストアではなく、リポジトリに問い合わせることになります。

63
00:04:24.460 --> 00:04:28.750
つまり、データエンジンはクエリを連携させるエンジンであり、

64
00:04:28.750 --> 00:04:32.440
抽出ファイルのクエリおよび作成を行うコンポーネントなのです。

65
00:04:32.440 --> 00:04:35.260
ファイルストアは複製コンポーネントであり、

66
00:04:35.260 --> 00:04:37.020
抽出ファイルをコピーし、

67
00:04:37.020 --> 00:04:39.513
ノード間で同期を取るのです。

